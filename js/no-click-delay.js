// Generated by CoffeeScript 1.4.0

/*
no-click-delay.coffee: kind of CoffeeScript version of Matteo Spinelli's NoClickDelay.js (http://cubiq.org/remove-onclick-delay-on-webkit-for-iphone)
description:
  There is an about 300ms delay of click event on iOS Safari and Android browser.
  It is to detect double tap zooming. You may not need it for some kinds of elements.
  no-click-delay.coffee eliminates this delay for specified kind of elements in specified element.
usage:
  new NoClickDelay() # fast click for button, a, and input elements in body.
  new NoClickDelay('nav', ['BUTTON']) # fast click for buttn in an element named as 'nav'.

2013 (C) ICHIKAWA, Yuji (New 3 Rs)
*/


(function() {
  var NoClickDelay;

  NoClickDelay = (function() {
    /*
        NoClickDelay is a class with event listener interface for touch.
        Construting an object enables no delay click for specified elements.
    */

    NoClickDelay.isTouch = 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch;

    /* NoClickDelay.isTouch is a detection result whether the browser is touch capable or not.
    */


    function NoClickDelay(elementOrId, tags) {
      if (elementOrId == null) {
        elementOrId = document.body;
      }
      if (tags == null) {
        tags = ['BUTTON', 'A', 'INPUT'];
      }
      /*
              elementOrId: an element or its id of the element in which you want specifed child elements to be clicked fast.
              tags: kinds of child elements you want to be clicked fast.
      */

      if (!NoClickDelay.isTouch) {
        return;
      }
      this.element = typeof elementOrId === 'string' ? document.getElementById(elementOrId) : elementOrId;
      this.tags = tags.map(function(e) {
        return e.toUpperCase();
      });
      this.element.addEventListener('touchstart', this, false);
    }

    NoClickDelay.prototype.handleEvent = function(event) {
      switch (event.type) {
        case 'touchstart':
          return this.onTouchStart(event);
        case 'touchmove':
          return this.onTouchMove(event);
        case 'touchend':
          return this.onTouchEnd(event);
      }
    };

    NoClickDelay.prototype.onTouchStart = function(event) {
      if (this.isTargetTag(event.target)) {
        this.moved = false;
        this.element.addEventListener('touchmove', this, false);
        this.element.addEventListener('touchend', this, false);
        event.target.focus();
        return event.preventDefault();
      }
    };

    NoClickDelay.prototype.onTouchMove = function(event) {
      return this.moved = true;
    };

    NoClickDelay.prototype.onTouchEnd = function(event) {
      var clickEvent;
      this.element.removeEventListener('touchmove', this, false);
      this.element.removeEventListener('touchend', this, false);
      if (!this.moved) {
        clickEvent = document.createEvent('MouseEvents');
        clickEvent.initEvent('click', true, true);
        return event.target.dispatchEvent(clickEvent);
      }
    };

    NoClickDelay.prototype.isTargetTag = function(element) {
      return this.tags.some(function(e) {
        return element.tagName === e;
      });
    };

    return NoClickDelay;

  })();

  window.NoClickDelay = NoClickDelay;

}).call(this);
