// Generated by CoffeeScript 1.6.3
/*
Nimbus - Dropbox filer by web app
(C) 2012-2013 ICHIKAWA, Yuji (New 3 Rs)
*/


(function() {
  var CANVAS_MAX_PIXELS, DROPBOX_API_KEY, DROPBOX_THUMBNAIL_DIMENSIONS, FLICKR_API_KEY, FileModalController, INSTAGRAM_CLIENT_ID, MAX_NUM_SEARCH_PHOTOS, MainViewController, PanelController, PersistentObject, PhotoViewerModalController, ViewerController, ancestorFolders, byteString, center, compareStatBy, compareString, config, coverFlowCanvasPixels, currentStats, dateString, directUrl, dropbox, exifDate2Date, fileModalController, flickrSearch, getExtension, handleDropboxError, initializeDropbox, instajam, isJpegFile, mainViewController, obj2query, panelController, panoramioSearch, spinner, textWidth, thumbnailUrl, typeIcon48, viewerController,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DROPBOX_API_KEY = 'YhIlKUggAFA=|prhxrh5PMBEqJAeN5Jjox+gc9NV/zlEy2UGJTcK+4A==';

  FLICKR_API_KEY = 'deab42733a35afe10cee60d4daeed7c6';

  INSTAGRAM_CLIENT_ID = '04f30474ba9347eaae106a7c1c6f77dd';

  DROPBOX_THUMBNAIL_DIMENSIONS = {
    xs: [32, 32],
    small: [32, 32],
    s: [64, 64],
    medium: [64, 64],
    m: [128, 128],
    large: [128, 128],
    l: [640, 480],
    xl: [1024, 768]
  };

  CANVAS_MAX_PIXELS = 5000000;

  MAX_NUM_SEARCH_PHOTOS = 10;

  instajam = null;

  dropbox = null;

  directUrl = null;

  currentStats = null;

  spinner = null;

  center = null;

  mainViewController = null;

  fileModalController = null;

  viewerController = null;

  compareString = function(str1, str2) {
    if (str1 > str2) {
      return 1;
    } else if (str1 < str2) {
      return -1;
    } else {
      return 0;
    }
  };

  dateString = function(date) {
    return date.toString().replace(/^.*? |GMT.* /g, '');
  };

  byteString = function(n) {
    if (n < 1000) {
      return n.toString() + 'B';
    } else if (n < 1000000) {
      return Math.round(n / 1000).toString() + 'KB';
    } else if (n < 1000000000) {
      return Math.round(n / 1000000).toString() + 'MB';
    } else if (n < 1000000000000) {
      return Math.round(n / 1000000000).toString() + 'GB';
    }
  };

  getExtension = function(path) {
    if (/\./.test(path)) {
      return path.replace(/^.*\./, '');
    } else {
      return '';
    }
  };

  isJpegFile = function(name) {
    return ['jpg', 'jpeg', 'jpe', 'jfif', 'jfi', 'jif'].indexOf(getExtension(name).toLowerCase()) >= 0;
  };

  ancestorFolders = function(path) {
    var e, i, split, _i, _len, _results;
    if (path === '/') {
      return [''];
    } else {
      split = path.split('/');
      _results = [];
      for (i = _i = 0, _len = split.length; _i < _len; i = ++_i) {
        e = split[i];
        _results.push(split.slice(0, +i + 1 || 9e9).join('/'));
      }
      return _results;
    }
  };

  obj2query = function(obj) {
    var key, value;
    return ((function() {
      var _results;
      _results = [];
      for (key in obj) {
        value = obj[key];
        _results.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
      }
      return _results;
    })()).join('&');
  };

  coverFlowCanvasPixels = function(canvasWidth, imageRatio) {
    return Math.ceil(canvasWidth * 2 * canvasWidth * imageRatio);
  };

  textWidth = function($element) {
    var html_calc, html_org, width;
    html_org = $element.html();
    html_calc = '<span>' + html_org + '</span>';
    $element.html(html_calc);
    width = $element.find('span:first').width();
    $element.html(html_org);
    return width;
  };

  handleDropboxError = function(error, path) {
    var _ref;
    if (path == null) {
      path = null;
    }
    if (path != null) {
      console.log(path);
    }
    if (window.console) {
      console.error(error);
    }
    switch (error.status) {
      case 400:
        alert('Sorry, there seems something wrong in software.');
        return console.error('Bad input parameter');
      case 401:
        alert('Authentication is expired. Please sign-in again.');
        return $signInout.button('reset');
      case 403:
        return console.error('Bad OAuth request');
      case 404:
        alert('Sorry, there seems something wrong in software.');
        return console.error('No such file or folder.');
      case 405:
        alert('Sorry, there seems something wrong in software.');
        return console.error('Request method not expected.');
      case 507:
        return alert('Your Dropbox seems full.');
      case 503:
        return alert('Dropbox seems busy. Please try again later.');
      default:
        if ((500 <= (_ref = error.status) && _ref < 600)) {
          alert('Sorry, there seems something wrong in Drobox server.');
          return console.error('Server error');
        } else {
          return console.log('maybe abort');
        }
    }
  };

  typeIcon48 = function(typeIcon) {
    switch (typeIcon) {
      case 'page_white_excel':
        return 'excel48';
      case 'page_white_film':
        return 'page_white_dvd';
      case 'page_white_powerpoint':
        return 'powerpoint48';
      case 'page_white_word':
        return 'word48';
      case 'page_white_sound':
        return 'music48';
      case 'page_white_compressed':
        return 'page_white_zip48';
      default:
        return typeIcon + '48';
    }
  };

  thumbnailUrl = function(stat, size) {
    if (size == null) {
      size = 'small';
    }
    if (stat.hasThumbnail) {
      return dropbox.thumbnailUrl(stat.path, {
        png: !isJpegFile(stat.name),
        size: size
      });
    } else {
      return "images/dropbox-api-icons/48x48/" + (typeIcon48(stat.typeIcon)) + ".gif";
    }
  };

  compareStatBy = function(order, direction) {
    var sign;
    sign = direction === 'ascending' ? 1 : -1;
    switch (order) {
      case 'name':
        return function(a, b) {
          return sign * compareString(a.name.toLowerCase(), b.name.toLowerCase());
        };
      case 'kind':
        return function(a, b) {
          return sign * compareString(getExtension(a.name).toLowerCase(), getExtension(b.name).toLowerCase());
        };
      case 'date':
        return function(a, b) {
          return sign * (a.modifiedAt.getTime() - b.modifiedAt.getTime());
        };
      case 'size':
        return function(a, b) {
          return sign * (a.size - b.size);
        };
      case 'place':
        return function(a, b) {
          return sign * compareString(a.path.toLowerCase(), b.path.toLowerCase());
        };
    }
  };

  exifDate2Date = function(str) {
    if (str == null) {
      return null;
    }
    return new Date(Date.parse(str.replace(/^(\d+):(\d+):(\d+)/, '$1/$2/$3') + ' UTC'));
  };

  flickrSearch = function(param, callback) {
    var defaultQuery, key, value;
    defaultQuery = {
      api_key: FLICKR_API_KEY,
      method: 'flickr.photos.search',
      per_page: MAX_NUM_SEARCH_PHOTOS,
      format: 'json'
    };
    for (key in defaultQuery) {
      value = defaultQuery[key];
      if (param[key] == null) {
        param[key] = value;
      }
    }
    return $.getJSON("http://www.flickr.com/services/rest/?" + (obj2query(param)) + "&jsoncallback=?", null, callback);
  };

  panoramioSearch = function(param, callback) {
    var defaultQuery, key, value;
    defaultQuery = {
      set: 'full',
      from: 0,
      to: MAX_NUM_SEARCH_PHOTOS,
      size: 'thumbnail',
      mapfilter: false
    };
    for (key in defaultQuery) {
      value = defaultQuery[key];
      if (param[key] == null) {
        param[key] = value;
      }
    }
    return $.getJSON("http://www.panoramio.com/map/get_panoramas.php?" + (obj2query(param)) + "&callback=?", null, callback);
  };

  PanelController = (function() {
    function PanelController() {
      this.getAndShowFolder = __bind(this.getAndShowFolder, this);
      this.$breadcrumbs = $('#footer .breadcrumb');
      this._initializeSignInoutButton();
      this._initializeBreadcrumbs();
      this._initializeNewFolderMenu();
      this._initialzeUploadMenu();
      this._initializeSearch();
    }

    PanelController.prototype.getAndShowFolder = function(path) {
      var _this = this;
      if (path == null) {
        path = config.get('currentFolder');
      }
      spinner.spin(document.body);
      mainViewController.disableClick();
      return dropbox.readdir(path, null, function(error, names, stat, stats) {
        spinner.stop();
        if (error) {
          return handleDropboxError(error);
        } else {
          config.set('currentFolder', path);
          _this._updateBreadcrumbs(path);
          return mainViewController.updateView(stats, false);
        }
      });
    };

    PanelController.prototype._updateBreadcrumbs = function(path) {
      var e, i, name, _i, _len, _ref;
      this.$breadcrumbs.empty();
      _ref = ancestorFolders(path);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        e = _ref[i];
        if (i === 0) {
          this.$breadcrumbs.append('<li><a href="#" data-path="/">Home</a></li>');
        } else {
          name = e.replace(/^.*\//, '');
          this.$breadcrumbs.append("<li>\n    <span class=\"divider\">/</span>\n    <a href=\"#\" data-path=\"" + e + "\">" + name + "</a>\n</li>");
        }
      }
      return this.$breadcrumbs.children('li:last-child').addClass('active');
    };

    PanelController.prototype._initializeSignInoutButton = function() {
      var $signInout;
      $signInout = $('#sign-inout');
      return $signInout.on('click', function() {
        spinner.spin(document.body);
        if ($signInout.text() === 'sign-in') {
          $signInout.button('loading');
          dropbox.reset();
          return dropbox.authenticate(function(error, client) {
            spinner.stop();
            if (error) {
              return handleDropboxError(error);
            } else {
              $signInout.button('signout');
              return $('#header button:not(#sign-inout)').removeAttr('disabled');
            }
          });
        } else {
          return dropbox.signOut(function(error) {
            spinner.stop();
            if (error) {
              return handleDropboxError(error);
            } else {
              $signInout.button('reset');
              return $('#header button:not(#sign-inout)').attr('disabled', 'disabled');
            }
          });
        }
      });
    };

    PanelController.prototype._initializeBreadcrumbs = function() {
      var _this = this;
      return this.$breadcrumbs.on('click', 'li:not(.active) > a', function(event) {
        var $target, path;
        $target = $(event.currentTarget);
        $target.parent().nextUntil().remove();
        $target.parent().addClass('active');
        path = $target.data('path');
        _this.getAndShowFolder(path);
        return false;
      });
    };

    PanelController.prototype._initializeNewFolderMenu = function() {
      var _this = this;
      return $('#menu-new-folder').on('click', function() {
        var name;
        name = prompt('Folder Name');
        if (!(name && name !== '')) {
          return false;
        }
        spinner.spin(document.body);
        dropbox.mkdir(config.get('currentFolder') + '/' + name, function(error, stat) {
          spinner.stop();
          if (error) {
            return handleDropboxError(error);
          } else {
            return _this.getAndShowFolder();
          }
        });
        return false;
      });
    };

    PanelController.prototype._initialzeUploadMenu = function() {
      var $filePicker,
        _this = this;
      $filePicker = $('#file-picker');
      $('#menu-upload').on('click', function() {
        $(this).parent().parent().prev().focus();
        $filePicker.click();
        return false;
      });
      return $filePicker.on('change', function(event) {
        var file, _i, _len, _ref, _results;
        spinner.spin(document.body);
        _ref = _this.files;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          _results.push(dropbox.writeFile(config.get('currentFolder') + '/' + file.name, file, null, function(error, stat) {
            spinner.stop();
            if (error) {
              return handleDropboxError(error);
            } else {
              return _this.getAndShowFolder();
            }
          }));
        }
        return _results;
      });
    };

    PanelController.prototype._initializeSearch = function() {
      var searchString, xhr,
        _this = this;
      xhr = null;
      searchString = null;
      return $('#search').on('keyup', function(event) {
        var $target;
        $target = $(event.currentTarget);
        if ($target.val() === searchString) {
          return;
        }
        if (xhr != null) {
          xhr.abort();
        }
        xhr = null;
        if ($target.val() === '') {
          return _this.getAndShowFolder();
        } else {
          spinner.spin(document.body);
          searchString = $target.val();
          return xhr = dropbox.findByName('', searchString, null, function(error, stats) {
            if (error) {
              handleDropboxError(error);
            } else {
              mainViewController.updateView(stats, true);
            }
            spinner.stop();
            return xhr = null;
          });
        }
      });
    };

    return PanelController;

  })();

  MainViewController = (function() {
    function MainViewController() {
      this._onClickFileName = __bind(this._onClickFileName, this);
      this._onClickFileRow = __bind(this._onClickFileRow, this);
      this.stats = null;
      this.coverflow = null;
      this.$fileList = $('#file-list');
      this.$tbody = this.$fileList.children('tbody');
      this.$thead = this.$fileList.children('thead');
      this._initializeModeRadio();
      this._initializeSortableHeader();
      this._initializeShare();
    }

    MainViewController.prototype.updateView = function(stats, search) {
      this.stats = stats;
      this.search = search != null ? search : false;
      console.log('pass');
      this._clearViews();
      return this._showView(this._viewMode());
    };

    MainViewController.prototype.enableClick = function() {
      this.$tbody.on('click', 'tr', this._onClickFileRow);
      this.$tbody.on('click', 'a', this._onClickFileAnchor);
      return this.$tbody.on('click', 'td:nth-child(2)', this._onClickFileName);
    };

    MainViewController.prototype.disableClick = function() {
      this.$tbody.off('click', 'tr', this._onClickFileRow);
      this.$tbody.off('click', 'a', this._onClickFileAnchor);
      return this.$tbody.off('click', 'td:nth-child(2)', this._onClickFileName);
    };

    MainViewController.prototype._viewMode = function() {
      return $('#radio-view > button.active').val();
    };

    MainViewController.prototype._clearViews = function() {
      var _ref;
      this.$tbody.empty();
      if ((_ref = this.coverflow) != null) {
        _ref.remove();
      }
      return this.coverflow = null;
    };

    MainViewController.prototype._showView = function(view) {
      if (this.stats == null) {
        return;
      }
      if (view === 'coverflow') {
        this.$fileList.parent().css('display', 'none');
        if (!this._isCoverFlowUpdated()) {
          this._drawCoverFlow();
        }
        return $('#coverflow').css('display', 'block');
      } else {
        if (!this._isFileListUpdated()) {
          this._drawFileList(config.get('fileList').order, config.get('fileList').direction, this.search);
        }
        this.$fileList.parent().css('display', 'block');
        return $('#coverflow').css('display', 'none');
      }
    };

    MainViewController.prototype._isFileListUpdated = function() {
      return this.$tbody.children().length > 0;
    };

    MainViewController.prototype._isCoverFlowUpdated = function() {
      return this.coverflow != null;
    };

    MainViewController.prototype._drawFileList = function(order, direction, search) {
      var $tr, stat, stats, tdGenerators, thGenerator, trs, _i, _len;
      if (search == null) {
        search = false;
      }
      tdGenerators = this._tdGenerators(search);
      thGenerator = this._thGenerator(order, direction);
      this.$thead.children().html(tdGenerators.map(function(e) {
        return thGenerator(e[0]);
      }).join(''));
      stats = this.stats.sort(compareStatBy(order, direction));
      trs = [];
      for (_i = 0, _len = stats.length; _i < _len; _i++) {
        stat = stats[_i];
        $tr = $("<tr>" + (tdGenerators.map(function(e) {
          return e[1](stat);
        }).join('')) + "</tr>");
        $tr.data('dropbox-stat', stat);
        trs.push($tr);
      }
      this.$tbody.empty();
      this.$tbody.append(trs);
      return this.enableClick();
    };

    MainViewController.prototype._sortFileList = function(order, direction) {
      /* sorts file list.*/

      var $trs;
      this._updateHeader(order, direction);
      $trs = this.$tbody.children();
      $trs.detach();
      $trs.sort(function(a, b) {
        return compareStatBy(order, direction)($(a).data('dropbox-stat'), $(b).data('dropbox-stat'));
      });
      return this.$tbody.append($trs);
    };

    MainViewController.prototype._updateHeader = function(order, direction) {
      var className, _i, _len, _ref;
      _ref = ['ascending', 'descending'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        className = _ref[_i];
        this.$thead.find("th." + className).removeClass(className);
      }
      return this.$thead.find('th > span').filter(function() {
        return $(this).text() === order;
      }).parent().addClass(direction);
    };

    MainViewController.prototype._drawCoverFlow = function() {
      var max, options, size, stats, width;
      size = 'l';
      width = 320;
      stats = this.stats;
      if (/iPhone|iPad/.test(navigator.userAgent)) {
        max = Math.floor(CANVAS_MAX_PIXELS / coverFlowCanvasPixels(width, DROPBOX_THUMBNAIL_DIMENSIONS[size][0] / DROPBOX_THUMBNAIL_DIMENSIONS[size][1]));
        if (this.stats.length > max) {
          stats = this.stats.filter(function(stat) {
            return stat.isFile && !/~$/.test(stat.name);
          });
          if (stats.length > max) {
            stats = stats.slice(0, max);
            setTimeout((function() {
              return alert('Too many files, trying to some of them.');
            }), 0);
          }
        }
      }
      options = {
        width: '100%',
        coverwidth: width,
        height: $('#coverflow').parent().height(),
        playlist: stats.map(function(stat) {
          var play;
          play = {
            "title": stat.name,
            "description": '',
            "image": thumbnailUrl(stat, size),
            "link": null,
            "duration": '',
            "stat": stat
          };
          if (stat.isFile) {
            if (!/~$/.test(stat.name)) {
              dropbox.makeUrl(stat.path, {
                download: true
              }, function(error, url) {
                if (error) {
                  return handleDropboxError(error, stat.path);
                } else {
                  return play.link = url.url;
                }
              });
            }
          }
          return play;
        })
      };
      spinner.spin(document.body);
      this.coverflow = coverflow('coverflow');
      return this.coverflow.setup(options).on('ready', function() {
        spinner.stop();
        return this.on('click', function(index, link) {
          var stat;
          stat = this.config.playlist[index].stat;
          if (link != null) {
            return viewerController.preview(stat, link);
          } else if (stat.isFolder) {
            return panelController.getAndShowFolder(stat.path);
          }
        });
      });
    };

    MainViewController.prototype._initializeModeRadio = function() {
      var _this = this;
      return $('#radio-view > button').on('click', function(event) {
        return _this._showView($(event.currentTarget).val());
      });
    };

    MainViewController.prototype._initializeSortableHeader = function() {
      var _this = this;
      return this.$thead.children().on('click', 'th:not(:first)', function(event) {
        var $target, orderAndDirection;
        $target = $(event.currentTarget);
        orderAndDirection = {
          order: $target.children('span').text(),
          direction: $target.hasClass('ascending') ? 'descending' : 'ascending'
        };
        config.set('fileList', orderAndDirection);
        return _this._sortFileList(orderAndDirection.order, orderAndDirection.direction);
      });
    };

    MainViewController.prototype._initializeShare = function() {
      var $popovered,
        _this = this;
      $popovered = null;
      $('#share').on('click', function(event) {
        var stat;
        $popovered = _this.$tbody.children('tr.info');
        if ($popovered.length === 0) {
          $popovered = $(event.currentTarget);
          $popovered.popover({
            placement: 'bottom',
            trigger: 'manual',
            title: 'How to share',
            content: 'Select a file and touch this button!'
          });
          return $popovered.popover('show');
        } else {
          stat = $popovered.data('dropbox-stat');
          spinner.spin(document.body);
          return dropbox.makeUrl(stat.path, null, function(error, url) {
            spinner.stop();
            if (error) {
              handleDropboxError(error);
              if (error.status = 403) {
                return alert('Link for sharing it is not available.');
              }
            } else {
              $popovered.popover({
                placement: 'bottom',
                trigger: 'manual',
                title: '',
                content: url.url
              });
              return $popovered.popover('show');
            }
          });
        }
      });
      return document.addEventListener('click', (function(event) {
        if (($popovered != null) && !$(event.target).hasClass('popover-content')) {
          $popovered.popover('destroy');
          $popovered = null;
          return event.stopPropagation();
        }
      }), true);
    };

    MainViewController.prototype._initializeSettingButton = function() {
      return $('#setting').on('click', function() {});
    };

    MainViewController.prototype._onClickFileRow = function(event) {
      var $target, stat;
      $target = $(event.currentTarget);
      stat = $target.data('dropbox-stat');
      if (stat == null) {
        return;
      }
      if (stat.isFile) {
        if ($target.hasClass('info')) {
          this.disableClick();
          return fileModalController.open(stat);
        } else {
          this.$tbody.children().removeClass('info');
          return $target.addClass('info');
        }
      } else if (stat.isFolder) {
        return panelController.getAndShowFolder(stat.path);
      }
    };

    MainViewController.prototype._onClickFileName = function(event) {
      var $input, $target, inputCancel, width,
        _this = this;
      $target = $(event.currentTarget);
      width = textWidth($target);
      $target.html("<input type=\"text\" value=\"" + ($target.text()) + "\" />");
      $input = $target.children();
      $input.css('width', width);
      inputCancel = function(event) {
        var $td;
        if (event.type === 'blur' || (event.type === 'click' && event.target !== $input[0])) {
          $td = $input.parent();
          $td.text($td.parent().data('dropbox-stat').name);
          $(document).off('click', inputCancel);
          return _this.enableClick();
        }
      };
      $(document).on('click', inputCancel);
      $input.on('blur', inputCancel);
      $input.on('keypress', function(event) {
        var stat;
        if (event.keyCode !== 13) {
          return;
        }
        $target = $(event.currentTarget);
        if ($target.val() === '') {
          return alert('Enter a name');
        } else {
          stat = $target.parents('tr').data('dropbox-stat');
          if ($target.val() !== stat.name) {
            spinner.spin(document.body);
            return dropbox.move(stat.path, stat.path.replace(stat.name, $target.val()), function(error, stat) {
              spinner.stop();
              if (error) {
                handleDropboxError(error);
              } else {
                $target.parents('tr').data('dropbox-stat', stat);
                $target.parent().text(stat.name);
              }
              $(document).off('click', inputCancel);
              return _this.enableClick();
            });
          } else {
            $target.parent().text(stat.name);
            $(document).off('click', inputCancel);
            return _this.enableClick();
          }
        }
      });
      $input.focus();
      this.disableClick();
      return event.stopPropagation();
    };

    MainViewController.prototype._onClickFileAnchor = function(event) {
      var path;
      path = $(this).text();
      panelController.getAndShowFolder(path);
      event.stopPropagation();
      return false;
    };

    MainViewController.prototype._tdGenerators = function(search) {
      var tdGenerators;
      if (search == null) {
        search = false;
      }
      tdGenerators = [
        [
          'image', function(stat) {
            return "<td><img height=\"48\" src=\"" + (thumbnailUrl(stat)) + "\"></td>";
          }
        ], [
          'name', function(stat) {
            return "<td>" + stat.name + "</td>";
          }
        ], [
          'date', function(stat) {
            return "<td>" + (dateString(stat.modifiedAt)) + "</td>";
          }
        ]
      ];
      if (search) {
        tdGenerators.splice(2, 0, [
          'place', function(stat) {
            return "<td><a href=\"#\">" + (stat.path.replace(/\/[^\/]*?$/, '')) + "</a></td>";
          }
        ]);
        console.log(tdGenerators);
      } else {
        tdGenerators.splice(3, 0, [
          'size', function(stat) {
            return "<td style=\"text-align: right;\">" + (byteString(stat.size)) + "</td>";
          }
        ], [
          'kind', function(stat) {
            return "<td>" + (stat.isFile ? getExtension(stat.name) : 'folder') + "</td>";
          }
        ]);
      }
      return tdGenerators;
    };

    MainViewController.prototype._thGenerator = function(order, direction) {
      return function(key) {
        return "<th" + ((order === key ? ' class=' + direction : '') + (key === 'size' ? ' style=\"text-align: right;\"' : '')) + "><span>" + key + "</span></th>";
      };
    };

    return MainViewController;

  })();

  FileModalController = (function() {
    function FileModalController() {
      var $fileModal;
      this.$fileModal = $('#file-modal');
      $fileModal = this.$fileModal;
      $('#open').on('click', function(event) {
        var stat;
        stat = $('#file-list > tbody > tr.info').data('dropbox-stat');
        viewerController.preview(stat, directUrl);
        return $fileModal.modal('hide');
      });
      $('#delete').on('click', function(event) {
        var stat;
        stat = $('#file-list > tbody > tr.info').data('dropbox-stat');
        if (confirm("Do you really delete " + stat.name + "?")) {
          spinner.spin(document.body);
          return dropbox.remove(stat.path, function(error, stat) {
            spinner.stop();
            if (error) {
              return handleDropboxError(error);
            } else {
              $fileModal.modal('hide');
              return panelController.getAndShowFolder();
            }
          });
        }
      });
      $('#restore').on('click', function(event) {
        var $active, stat;
        $active = $fileModal.find('tr.info');
        if ($active.length === 0) {
          alert('select a previous version');
          return;
        }
        stat = $active.data('dropbox-stat');
        spinner.spin(document.body);
        return dropbox.revertFile(stat.path, stat.versionTag, function(error, stat) {
          spinner.stop();
          if (error) {
            return handleDropboxError(error);
          } else {
            spinner.spin(document.body);
            return dropbox.history(stat.path, null, function(error, stats) {
              spinner.stop();
              $fileModal.find('.modal-body').empty();
              return FileModalController._makeHistoryList(stats);
            });
          }
        });
      });
      $fileModal.on('click', 'tbody tr', function(event) {
        var $this;
        $this = $(this);
        $fileModal.find('tr').removeClass('info');
        $this.addClass('info');
        return $('#restore').removeAttr('disabled');
      });
      $fileModal.on('hidden', function(event) {
        return mainViewController.enableClick();
      });
    }

    FileModalController.prototype.open = function(stat) {
      var $fileModal;
      $fileModal = this.$fileModal;
      $fileModal.find('h3').html("<img src=\"" + (thumbnailUrl(stat)) + "\">" + stat.name);
      $fileModal.find('table').remove();
      $('#open').attr('disabled', 'disabled');
      spinner.spin(document.body);
      dropbox.history(stat.path, null, function(error, stats) {
        spinner.stop();
        if (error) {
          handleDropboxError(error);
        } else {
          FileModalController._makeHistoryList(stats);
        }
        return $fileModal.modal('show');
      });
      directUrl = null;
      return dropbox.makeUrl(stat.path, {
        download: true
      }, function(error, url) {
        if (error) {
          return handleDropboxError(error);
        } else {
          directUrl = url.url;
          return $('#open').removeAttr('disabled');
        }
      });
    };

    FileModalController._makeHistoryList = function(stats) {
      /* prepares file history list.*/

      var $table, $tbody, $tr, ITEMS, stat, th, _i, _len;
      ITEMS = [
        [
          'date', function(stat) {
            return "<td>" + (dateString(stat.modifiedAt)) + "</td>";
          }
        ], [
          'size', function(stat) {
            return "<td style=\"text-align: right;\">" + (byteString(stat.size)) + "</td>";
          }
        ]
      ];
      $table = $('<table class="table"></table>');
      th = function(key) {
        return "<th" + (key === 'size' ? ' style="text-align: right;"' : '') + "><span>" + key + "</span></th>";
      };
      $table.append("<thead><tr>" + (ITEMS.map(function(e) {
        return th(e[0]);
      }).join('')) + "</tr></thead>");
      stats = stats.sort(function(a, b) {
        return b.modifiedAt.getTime() - a.modifiedAt.getTime();
      });
      $tbody = $('<tbody></tbody>');
      for (_i = 0, _len = stats.length; _i < _len; _i++) {
        stat = stats[_i];
        $tr = $("<tr>" + (ITEMS.map(function(e) {
          return e[1](stat);
        }).join('')) + "</tr>");
        $tr.data('dropbox-stat', stat);
        $tbody.append($tr);
      }
      $table.append($tbody);
      $('#file-modal .modal-body').append($table);
      return $('#restore').attr('disabled', 'disabled');
    };

    return FileModalController;

  })();

  ViewerController = (function() {
    function ViewerController(modalController) {
      var _this = this;
      this.modalController = modalController;
      this.$viewer = $('#viewer');
      $('#button-info').on('click', function(event) {
        return _this.modalController.show();
      });
      $('#viewer > .close').on('click', function(event) {
        return $(this).parent().fadeOut();
      });
    }

    ViewerController.prototype.preview = function(stat, link) {
      var xhr,
        _this = this;
      this.$viewer.css('background-image', '');
      $('#button-info').attr('disabled', 'disabled');
      switch (getExtension(stat.name).toLowerCase()) {
        case 'jpg':
        case 'jpeg':
        case 'jpe':
        case 'jfif':
        case 'jfi':
        case 'jif':
          this.$viewer.css('background-image', "url(\"" + (thumbnailUrl(stat, 'xl')) + "\")");
          this.$viewer.fadeIn();
          spinner.spin($('#button-info')[0]);
          xhr = dropbox.readFile(stat.path, {
            binary: true
          }, function() {
            return spinner.stop();
          });
          return xhr.onprogress = function() {
            var bytes, dirtyText, error, i, jpeg, text, _i, _ref;
            dirtyText = xhr.responseText != null ? xhr.responseText : xhr.response;
            bytes = [];
            for (i = _i = 0, _ref = dirtyText.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              bytes.push(String.fromCharCode(dirtyText.charCodeAt(i) & 0xFF));
            }
            text = bytes.join('');
            try {
              jpeg = new JpegMeta.JpegFile(text, stat.name);
              xhr.abort();
              spinner.stop();
              _this.modalController.prepareViewerModal(stat, jpeg.metaGroups);
              return $('#button-info').removeAttr('disabled');
            } catch (_error) {
              error = _error;
            }
          };
        case 'png':
        case 'gif':
          this.$viewer.css('background-image', "url(\"" + link + "\")");
          return this.$viewer.fadeIn();
        default:
          spinner.spin(document.body);
          return dropbox.makeUrl(stat.path, {
            download: true
          }, function(error, url) {
            spinner.stop();
            return bootbox.confirm('Do you want to open in new tab?', function(result) {
              if (result) {
                return window.open(url.url);
              }
            });
          });
      }
    };

    return ViewerController;

  })();

  PhotoViewerModalController = (function() {
    function PhotoViewerModalController() {
      var _this = this;
      this.$viewerModal = $('#viewer-modal');
      this.$photoServices = $('#photo-services');
      this.$maps = $('#google-maps');
      this.$metadata = $('#metadata');
      this.$viewerModal.on('shown', function() {
        if ((_this.center != null) && (_this.maps != null)) {
          google.maps.event.trigger(_this.maps, 'resize');
          return _this.maps.setCenter(_this.center);
        }
      });
    }

    PhotoViewerModalController.prototype.prepareViewerModal = function(stat, metaGroups) {
      var k, key, marker, v, value, _ref, _ref1, _ref2, _results;
      this.$photoServices.empty();
      this.$photoServices.prev().css('display', 'none');
      this.$viewerModal.find('h3').html("<img src=\"" + (thumbnailUrl(stat, 'm')) + "\">" + stat.name);
      if (metaGroups.gps != null) {
        this.$maps.css('display', '');
        this.center = new google.maps.LatLng(metaGroups.gps.latitude.value, metaGroups.gps.longitude.value);
        if (this.maps == null) {
          this.maps = new google.maps.Map(this.$maps[0], {
            zoom: 16,
            center: this.center,
            mapTypeId: google.maps.MapTypeId.ROADMAP
          });
        }
        marker = new google.maps.Marker({
          map: this.maps,
          position: this.center
        });
        this._searchPhotos(this.center.lat(), this.center.lng(), exifDate2Date((_ref = (_ref1 = metaGroups.exif) != null ? (_ref2 = _ref1.DateTimeOriginal) != null ? _ref2.value : void 0 : void 0) != null ? _ref : null));
      } else {
        this.center = null;
        this.$maps.css('display', 'none');
      }
      this.$metadata.empty();
      _results = [];
      for (key in metaGroups) {
        value = metaGroups[key];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (k in value) {
            v = value[k];
            if (!(v instanceof JpegMeta.MetaProp)) {
              continue;
            }
            this.$metadata.append("<dt>" + v.description + "</dt>");
            _results1.push(this.$metadata.append("<dd>" + v.value + "</dd>"));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    PhotoViewerModalController.prototype.show = function() {
      return this.$viewerModal.modal('show');
    };

    PhotoViewerModalController.prototype._searchPhotos = function(lat, lng) {
      var earthRadius, lngRangeRadian, range, rangeRadian,
        _this = this;
      flickrSearch({
        /*
        min_taken_date: Math.floor new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0) / 1000
        max_taken_date: Math.floor new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59, 99) / 1000
        */

        has_geo: 1,
        lat: lat,
        lon: lng,
        radius: 5
      }, function(data) {
        var i, photos, _i, _ref, _results;
        if (data.stat === 'fail') {
          return;
        }
        photos = data.photos.photo;
        if (photos.length > 0) {
          _this.$photoServices.prev().css('display', 'block');
          _results = [];
          for (i = _i = 0, _ref = photos.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(_this.$photoServices.append("<img src=\"http://static.flickr.com/" + photos[i].server + "/" + photos[i].id + "_" + photos[i].secret + "_s.jpg\">"));
          }
          return _results;
        }
      });
      earthRadius = 6378.137;
      range = 5;
      rangeRadian = range / earthRadius;
      lngRangeRadian = rangeRadian / Math.cos(lat * Math.PI / 180);
      panoramioSearch({
        minx: lng - lngRangeRadian,
        maxx: lng + lngRangeRadian,
        miny: lat - rangeRadian,
        maxy: lat + rangeRadian
      }, function(data) {
        var i, photos, _i, _ref, _results;
        photos = data.photos;
        if (photos.length > 0) {
          _this.$photoServices.prev().css('display', 'block');
          _results = [];
          for (i = _i = 0, _ref = photos.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(_this.$photoServices.append("<img src=\"" + photos[i].photo_file_url + "\">"));
          }
          return _results;
        }
      });
      return instajam.media.search({
        lat: lat,
        lng: lng
      }, function(result) {
        var e, _i, _len, _ref, _results;
        if (result instanceof Error) {
          return console.error(result);
        } else {
          if (result.data.length > 0) {
            _this.$photoServices.prev().css('display', 'block');
            _ref = result.data.slice(0, MAX_NUM_SEARCH_PHOTOS);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              e = _ref[_i];
              _results.push(_this.$photoServices.append("<img src=\"" + e.images.thumbnail.url + "\">"));
            }
            return _results;
          }
        }
      });
    };

    return PhotoViewerModalController;

  })();

  PersistentObject = (function() {
    PersistentObject.restore = function(key, defaultValue) {
      var k, restored, v, _ref;
      if (defaultValue == null) {
        defaultValue = {};
      }
      restored = JSON.parse((_ref = localStorage[key]) != null ? _ref : '{}');
      for (k in defaultValue) {
        v = defaultValue[k];
        if (restored[k] == null) {
          restored[k] = v;
        }
      }
      return new PersistentObject(key, restored);
    };

    function PersistentObject(key, object) {
      this.key = key;
      this.object = object;
      localStorage[this.key] = JSON.stringify(this.object);
    }

    PersistentObject.prototype.get = function(property) {
      return this.object[property];
    };

    PersistentObject.prototype.set = function(property, value) {
      this.object[property] = value;
      return localStorage[this.key] = JSON.stringify(this.object);
    };

    return PersistentObject;

  })();

  initializeDropbox = function() {
    var $signInout, error, key, notApproved, value;
    notApproved = /not_approved=true/.test(location.toString());
    $signInout = $('#sign-inout');
    $('#header button:not(#sign-inout)').attr('disabled', 'disabled');
    dropbox = new Dropbox.Client({
      key: DROPBOX_API_KEY,
      sandbox: false
    });
    dropbox.authDriver(new Dropbox.Drivers.Redirect({
      rememberUser: true
    }));
    if (notApproved) {
      return;
    }
    try {
      for (key in localStorage) {
        value = localStorage[key];
        if (!(/^dropbox-auth/.test(key) && JSON.parse(value).key === dropbox.oauth.key)) {
          continue;
        }
        $signInout.button('loading');
        $signInout.removeClass('btn-primary');
        dropbox.authenticate(function(error, client) {
          if (error) {
            handleDropboxError(error);
            $signInout.button('reset');
            return $signInout.addClass('btn-primary');
          } else {
            $signInout.button('signout');
            $('#header button:not(#sign-inout)').removeAttr('disabled');
            return panelController.getAndShowFolder();
          }
        });
        break;
      }
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    return window.history.replaceState(null, null, location.pathname);
  };

  if (typeof jasmine === "undefined" || jasmine === null) {
    config = PersistentObject.restore('nimbus-config', {
      currentFolder: '/',
      fileList: {
        order: 'name',
        direction: 'ascending'
      }
    });
    new NoClickDelay(document.body, ['BUTTON', 'A', 'INPUT', 'TH', 'TR']);
    spinner = new Spinner();
    panelController = new PanelController();
    mainViewController = new MainViewController();
    fileModalController = new FileModalController();
    viewerController = new ViewerController(new PhotoViewerModalController());
    instajam = new Instajam({
      client_id: INSTAGRAM_CLIENT_ID
    });
    initializeDropbox();
  }

}).call(this);
